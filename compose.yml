services:

  certbot:
    image: certbot/certbot
    container_name: certbot
    hostname: certbot
    restart: unless-stopped
    env_file:
      - ".env"
    volumes:
      - etc-letsencrypt-volume:/etc/letsencrypt:rw
      - var-www-html-volume:/var/www/html:rw
    # command: certonly --non-interactive --keep-until-expiring --standalone --preferred-challenges http --agree-tos --email ${USER_EMAIL} -d ${SRV_CN}
    # original: entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certonly --non-interactive --keep-until-expiring --standalone --preferred-challenges http --agree-tos --email ${USER_EMAIL} -d ${SRV_CN}; sleep 12h & wait $${!}; done;'"

  nginx:
    image: nginx
    depends_on:
      certbot:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ${DATA_PATH}/nginx:/etc/nginx/conf.d:ro
      - etc-letsencrypt-volume:/etc/letsencrypt:ro
      - var-www-html-volume:/var/www/html:ro
    ports:
      - "80:80"
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  mylandscape:
    depends_on:
      certbot:
        condition: service_started
      nginx:
        condition: service_started
    build: .
    image: mylandscape
    container_name: mylandscape
    restart: unless-stopped
    hostname: mylandscape
    env_file:
      - .env
    ports:
      - "8080:80/tcp"
    volumes:
      - ./hosted_logos:/home/landscape2/logos
volumes:
  etc-letsencrypt-volume:
    name: "Volume for LetsEncrypt certificates"
  var-www-html-volume:
    name: "Volume for certbot auth files"